// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Identity {
  id        Int       @id @default(autoincrement())
  userId    String
  provider  Provider
  accountId String // LOCAL = email, OAuth2 = 고유 ID
  email     String // 제공자가 반환한 이메일 (확인용)
  createdAt DateTime  @default(now())
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, accountId])
  @@index([userId])
  @@map("identities")
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  password          String?
  nickname          String?
  icon              String              @default("https://github.com/shadcn.png")
  status            UserStatus          @default(ACTIVE)
  role              UserRole            @default(USER)
  gender            Gender              @default(UNKNOWN)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  identity          Identity[]
  UserCoupon        UserCoupon[]
  AuditLog          AuditLog[]
  EmailVerification EmailVerification[]
  RefreshToken      RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique // 실제 Refresh Token 값
  userId    String // User와의 관계
  issuedAt  DateTime @default(now()) // 발급 시간
  expiresAt DateTime // 만료 시간
  revoked   Boolean  @default(false) // 토큰 회수 여부

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("refresh_tokens")
}

// 이메일 인증을 받기 위해 사용자가 받는 이메일 URL에 들어가는 token -> 삭제로직 필요
model EmailVerification {
  id        Int      @id @default(autoincrement())
  userId    String
  email     String
  token     String   @unique
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("email_verifications")
}

model CouponCode {
  id               Int          @id @default(autoincrement())
  code             String
  maxUses          Int?
  usedCount        Int          @default(0)
  teamRestrictions String?
  amount           Decimal      @db.Decimal(18, 2)
  description      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  expiresAt        DateTime?
  UserCoupon       UserCoupon[]
}

model UserCoupon {
  id         Int          @id @default(autoincrement())
  userId     String
  couponId   Int
  issuedAt   DateTime     @default(now()) // 지급된 시간
  redeemedAt DateTime? // 사용된 시간 (null이면 사용되지 않음)
  status     CouponStatus @default(UNUSED)

  user   User       @relation(fields: [userId], references: [id])
  coupon CouponCode @relation(fields: [couponId], references: [id])

  @@index([userId])
  @@index([couponId])
}

// interceptor를 통해 시스템 로그를 남기기 위한 모델
model AuditLog {
  id        Int      @id @default(autoincrement())
  event     String // evnet나 url 기입
  title     String
  data      Json
  userId    String? // userId나 adminId 둘 중 하나는 선택
  ipAddress String?
  userAgent String?
  timezone  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Provider {
  LOCAL
  GOOGLE
  APPLE
  TELEGRAM
  FACEBOOK
  ANONYMOUS // 익명 사용자 => 쇼핑몰 비회원 주문 등
}

enum UserRole {
  SUDO
  ADMIN
  USER
}

enum UserStatus {
  PENDING // 대기 중 (승인 대기 등)
  ACTIVE // 활성 사용자
  REJECTED // 승인이 거절된 사용자
  BLOCKED // 차단된 사용자
  DORMANT // 휴면 사용자
  WITHDRAWN // 탈퇴한 사용자
}

enum CouponStatus {
  UNUSED // 지급됨 (미사용)
  REDEEMED // 사용 완료
  EXPIRED // 만료됨
}

enum Gender {
  MALE
  FEMAILE
  UNKNOWN
}
